import React, { Component } from 'react';

class Clock extends Component {
    state = {
        time: new Date()
    };

    componentDidMount() {
        this.intervalId = setInterval(() => {
            this.setState({ time: new Date() });
        }, 1000);
    }

    componentWillUnmount() {
        clearInterval(this.intervalId);
    }

    componentDidUpdate(prevProps, prevState) {
        if (this.state.time !== prevState.time) {
            console.log('Time updated!');
        }
    }

    render() {
        return (
            <div>
                <h1>Current time:</h1>
                <p>{this.state.time.toLocaleTimeString()}</p>
            </div>
        );
    }
}

export default Clock;
//Этот код демонстрирует использование методов жизненного цикла в классовом компоненте React.
//
// Методы жизненного цикла позволяют выполнять side-effect-ы в классовых компонентах,
// т.е. эффекты, которые не связаны с рендерингом компонента. Это может быть, например,
// выполнение сетевого запроса, обработка событий, работа с таймерами, и т.д.
//
// В этом примере мы создаем классовый компонент Clock, который отображает текущее время
// и обновляет его каждую секунду. В начале компонента мы создаем состояние time, используя
// свойство state.
//
// Метод componentDidMount() вызывается после того, как компонент был добавлен в DOM. В этом
// методе мы устанавливаем интервал, который каждую секунду вызывает метод setState(), чтобы
// обновить состояние time.
//
// Метод componentWillUnmount() вызывается перед тем, как компонент будет удален из DOM. В
// этом методе мы очищаем интервал, чтобы предотвратить утечку памяти.
//
// Метод componentDidUpdate() вызывается после обновления компонента. В этом методе мы
// сравниваем текущее значение time с предыдущим значением и выводим сообщение в консоль,
// если они отличаются.
//
// Метод render() отображает текущее значение time в элементе p в JSX.
//
// В результате мы получаем классовый компонент, который отображает текущее время и
// обновляет его каждую секунду, используя методы жизненного цикла.