import React, { useState, useEffect } from 'react';

//Этот код демонстрирует использование хука useEffect() в функциональном компоненте React.

function UseEffectExample() {
    const [count, setCount] = useState(0);

    useEffect(() => {
        const intervalId = setInterval(() => {
            setCount((prevCount) => prevCount + 1);
        }, 1000);

        return () => clearInterval(intervalId);
    }, []);//[] это массив зависимости

    //Хук useEffect() позволяет выполнять side-effect-ы в функциональных компонентах,
    // т.е. эффекты, которые не связаны с рендерингом компонента. Это может быть, например,
    // выполнение сетевого запроса, обработка событий, работа с таймерами, и т.д.

    //В этом примере мы используем useEffect() для установки таймера, который обновляет
    // значение счетчика каждую секунду. В начале компонента мы создаем состояние count,
    // используя хук useState(). Затем мы используем useEffect() для установки таймера с
    // помощью setInterval(). Возвращаемое значение из useEffect() - это функция очистки,
    // которая останавливает таймер при удалении компонента.

    //При вызове setCount() мы передаем функцию, которая получает предыдущее значение
    // count и возвращает новое значение. Это необходимо для того, чтобы предотвратить
    // потерю обновленных значений при многократных вызовах setCount().

    return (
        <div className="use-effect-example">
            <h2>UseEffect Example</h2>
            <p>Count: {count}</p>
        </div>
        //Наконец, мы выводим текущее значение count в элементе p в JSX.
        //
        // В результате мы получаем компонент, который отображает обновляемое
        // значение счетчика с помощью хука useEffect().
    );
}

export default UseEffectExample;
